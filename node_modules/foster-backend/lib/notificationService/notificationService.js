//= ========================= Load Modules Start =======================

//= ========================= Load internal modules ====================

const _ = require("lodash");
const appConstants = require("./notificationConstants");
var AWS = require('aws-sdk');

AWS.config.update({
  accessKeyId: appConstants.AWS.accessKeyId,
  secretAccessKey: appConstants.AWS.secretAccessKey,
  region: appConstants.NOTIFICATION_DATA.region,
});

const sns = new AWS.SNS({
  region: appConstants.NOTIFICATION_DATA.region,
  apiVersion: appConstants.NOTIFICATION_DATA.apiVersion,
}
);

//= ========================= Load Modules End ==============================================


// method to create sns endpoint
const createSNSEndpoint = async (filter) => {
  try {
    const params = {
      Token: filter.device_token
    }
    if (filter.platform == 2) {
      params.PlatformApplicationArn = appConstants.NOTIFICATION_DATA.andPlatformApplicationARN;
    }
    else if (filter.platform == '1') {
      params.PlatformApplicationArn = appConstants.NOTIFICATION_DATA.iosPlatformApplicationARN;
    }
    console.log(params)
    return sns.createPlatformEndpoint(params).promise();
  } catch (err) {
    throw err;
  }
};

// method to delete sns endpoint
const deleteSNSEndpoint = async (filter) => {
  try {
    const params = {
      EndpointArn: filter.endpoint_arn
    };
    return sns.deleteEndpoint(params).promise();
  } catch (err) {
    throw err;
  }
};

// method to set end point attributes
const setEndpointAttr = async (filter) => {
  try {
    let attributes = {};
    attributes.Enabled = filter.enabled;
    const params = {
      Attributes: attributes,
      EndpointArn: filter.endpoint_arn
    };
    return sns.setEndpointAttributes(params).promise();
  } catch (err) {
    throw err;
  }
};

// method to get end point attributes
const getEndpointAttr = async (filter) => {
  try {
    const params = {
      EndpointArn: filter.notiParams.endpoint_arn
    };
    return sns.getEndpointAttributes(params).promise();
  } catch (err) {
    throw err;
  }
};

// method to publish to endpoint
const publishToEndpoint = async (filter) => {
  try {
    filter.endpoint_arn = filter.notiParams.endpoint_arn;
    let paramData = await getEndpointAttr(filter);
    if (paramData.Attributes.Enabled !== 'false') {
      let message = filter.notiParams.message;
      var params = {
        MessageStructure: 'json',
        Message: JSON.stringify({
          default: message,
          APNS_SANDBOX: JSON.stringify({
            aps: {
              'alert': message,
              'content-available': 1
            },
            'type': filter.notiParams.type,
          }),
          GCM: JSON.stringify({
            notification: {
              body: message
              // title: 'Portugal vs. Denmark'
            },
            data: {
              'type': filter.notiParams.type,
            }
          })
        }),
        TargetArn: filter.notiParams.endpoint_arn
      };
      return sns.publish(params).promise();
    }
    return;
  } catch (err) {
    throw err;
  }
}

// ===========================Export module start================================//

module.exports = {
  createSNSEndpoint,
  deleteSNSEndpoint,
  setEndpointAttr,
  getEndpointAttr,
  publishToEndpoint
};

//= ========================= Export module end ===================================//
