//= ========================= Load Modules Start =======================

const _ = require("lodash");
const userRouter = require("express").Router();
const resHndlr = require("../resHandler");
const userFacade = require("../user/userFacade");
const middleware = require("../middleware");
const social = require("../social");

//= =============================== Load module end =====================

// Validation of registration request params
const getMiddleWareValidation = () => [middleware.multer.singleFile("image"), middleware.authentication.getHeaders,
middleware.validators.validateUserRegistration];

// Register request params
const getRegistrationRequestParams = (req) => {
    const params = _.pick(req.body, ["name", "email",
        "password", "registration_ids", "address","latitude","longitude"]);
    params.file = req.file;
    return params;
};

// Register user
const registerUser = (req, res) => {
    userFacade.registerUser(getRegistrationRequestParams(req))
        .then((result) => {
            resHndlr.sendSuccess(res, result);
        })
        .catch((err) => {
            resHndlr.sendError(res, err);
        });
};


// Route to signup
userRouter.route("/register")
    .post(
        getMiddleWareValidation(),
        (req, res) => {
            registerUser(req, res);
        },
    );


/**
* Route for otp confirmation
*/
userRouter.route("/verifyAccount")
    .post([
    ], (req, res) => {
        const params = _.pick(req.body, ["token"]);
        userFacade.otpConfirmation(params)
            .then((result) => {
                resHndlr.sendSuccess(res, result);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });

/**
* resend otp confirmation
*/
userRouter.route("/resendotp")
    .post([
        middleware.validators.resendOTP,
    ], (req, res) => {
        const params = _.pick(req.body, ["email"]);
        userFacade.resendOtp(params)
            .then((result) => {
                resHndlr.sendSuccess(res, result);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });


// Method to get access token n registration ids
const getRegistrationNAccessToken = (req) => {
    const params = _.pick(req.body, ["accessToken", "registration_ids"]);
    return params;
};

// Method to add access token n registration ids
const addRegistrationAndAccessToken = (params, resp) => {
    resp.accessToken = params.accessToken;
    resp.registration_ids = params.registration_ids;
};

// Route to login with fb
userRouter.route("/login/fb")
    .post([middleware.authentication.getHeaders,
    middleware.validators.validateFBLogin], (req, res) => {
        const params = getRegistrationNAccessToken(req);
        social.getFBProfile(params.accessToken)
            .bind({})
            .then((resp) => {
                addRegistrationAndAccessToken(params, resp);
                return userFacade.findCreateFbUser(resp);
            }).then((user) => {
                resHndlr.sendSuccess(res, user);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });


// Route to login with google plus
userRouter.route("/login/gplus")
    .post([middleware.authentication.getHeaders,
    middleware.validators.validateFBLogin], (req, res) => {
        const params = getRegistrationNAccessToken(req);
        social.getGooglePlusProfile(params.accessToken)
            .bind({})
            .then((resp) => {
                addRegistrationAndAccessToken(params, resp);
                return userFacade.findCreateGoogleUser(resp);
            }).then((user) => {
                resHndlr.sendSuccess(res, user);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });

/**
* Route to login with email
*/
userRouter.route("/login")
    .post([
        middleware.authentication.getHeaders, middleware.validators.validateCredentials,
    ], (req, res) => {
        const params = _.pick(req.body, ["email", "password", "registration_ids"]);
        userFacade.loginWithEmail(params)
            .then((result) => {
                resHndlr.sendSuccess(res, result);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });


/**
* Route to send forget password link
*/
userRouter.route("/password/forgot")
    .post(
        [middleware.validators.validateForgotPassword],
        (req, res) => {
            const userData = _.pick(req.body, ["email"]);
            userFacade.forgotPassword(userData)
                .then((result) => {
                    resHndlr.sendSuccess(res, result);
                })
                .catch((err) => {
                    resHndlr.sendError(res, err);
                });
        },
    );

// Route to reset password
userRouter.route("/password/reset")
    .post((req, res) => {
        const params = _.pick(req.body, ["token", "password"]);
        userFacade.changeForgotPass(params)
            .then((result) => {
                resHndlr.sendSuccessWithMsg(res, result);
            })
            .catch((err) => {
                resHndlr.sendError(res, err);
            });
    });

//= =============================== Export route ================================
module.exports = userRouter;
