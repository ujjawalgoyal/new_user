const querystring = require("querystring");
const http = require("http");
const https = require("https");
const logger = require("./logger");

const TAG = "appHttpClient";
const Promise = require("bluebird");

const getResp = function (res) {
  return new Promise(((resolve) => {
    let fullResp = "";
    res.setEncoding("utf8");
    res.on("data", (chunk) => {
      fullResp += chunk.toString();
    }).on("end", () => {
      resolve(fullResp);
    });
  }));
};

function postRequest(postReq, callback) {
  const options = {
    hostname: postReq.hostname,
    port: postReq.port,
    path: postReq.path,
    method: "POST",
    headers: postReq.headers,
  };
  let client = null;
  if (postReq.isSecure) {
    client = https;
  } else {
    client = http;
  }
  const req = client.request(options, (res) => {
    getResp(res, callback);
  });
  req.on("error", (e) => {
    logger.error({
      method: "postRequest", request: options, body: postReq.body, error: e.message,
    }, TAG);
  });
  req.write(postReq.body);
  req.end();
}

module.exports = {
  post(hostname, port, path, params, callback) {
    const body = querystring.stringify(params);
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": Buffer.byteLength(body),
    };
    const postReqObj = {};
    postReqObj.hostname = hostname;
    postReqObj.port = port;
    postReqObj.path = path;
    postReqObj.headers = headers;
    postReqObj.body = body;
    postReqObj.isSecure = false;
    postRequest(postReqObj, callback);
  },
  postSecure(hostname, port, path, params, callback) {
    const body = querystring.stringify(params);
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": Buffer.byteLength(body),
    };
    const postReqObj = {};
    postReqObj.hostname = hostname;
    postReqObj.port = port;
    postReqObj.path = path;
    postReqObj.headers = headers;
    postReqObj.body = body;
    postReqObj.isSecure = true;
    postRequest(postReqObj, callback);
  },
  get(url, callback) {
    http.get(url, (res) => {
      getResp(res, callback);
    }).on("error", (e) => {
      logger.error({ method: "get", url, error: e.message }, TAG);
    }).end();
  },
  getSecure(url) {
    console.log(url);
    return new Promise(((resolve, reject) => {
      https.get(url, (res) => {
        getResp(res)
          .then((result) => {
            resolve(result);
          });
      }).on("error", (e) => {
        logger.error({ method: "getSecure", url, error: e.message }, TAG);
      }).end();
    }));
  },
};
