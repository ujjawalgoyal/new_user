

//= ========================= Load Modules Start =======================
//= ========================= Load External modules ====================

const Promise = require("bluebird");
const AWS = require("aws-sdk");
const fs = require("fs");
const path = require("path");
const fastCsv = require("fast-csv");
const logger = require("../logger").logger;
// const constants = require("../programuploader/programConstants");

//= ========================= Load internal modules ====================

const config = require("../config/index");

AWS.config.update({
  accessKeyId: config.env.s3_credentials.keyId,
  secretAccessKey: config.env.s3_credentials.accessKey,
  // region: options.cfg.s3.region,
  bucketName: config.env.s3.bucketName,
  signatureVersion: config.env.s3.signatureVersion,
});

const Bucket = config.env.s3.bucketName;
const photoBucket = new AWS.S3({ params: { Bucket } });


//= ========================= Load Modules End ==============================================
function deleteTempFile(filePath) {
  fs.stat(filePath, (err, stats) => {
    // console.log(stats);//here we got all information of file in stats variable

    if (err) {
      console.error(err);
    }

    fs.unlink(filePath, (err) => {
      if (err) {
        console.log(err);
      }
      console.log("file deleted successfully");
    });
  });
}

function uploadToS3(file, buffer) {
  return new Promise(((resolve, reject) => {
    photoBucket.upload({
      Key: file.filename,
      ContentType: file.mimetype,
      Body: buffer,
      ACL: "public-read",
    }, (err, data) => {
      if (err) {
        console.log("upload fail: ", err);
        reject(err);
      } else {
        resolve(data);
      }
    });
  }));
}


function uploadFile(file, isDeletedFilePath = true) {
  const buffer = fs.createReadStream(file.path);
  return uploadToS3(file, buffer)
    .then((data) => {
      if (isDeletedFilePath) {
        deleteTempFile(file.path);
      }
      return data;
    });
}

function uploadImageThumb(file) {
  const size = 128;
  let dest = path.join(file.path, "../");
  const resizeName = `${size}x${size}${file.filename}`;
  dest += resizeName;
  return new Promise(((resolve, reject) => {
    gm(file.path)
      .resize(size, size)
      .autoOrient()
      .write(dest, (err) => {
        if (err) {
          reject(err);
        }
        const buffer = fs.createReadStream(dest);
        const resizeImage = file;
        resizeImage.filename = resizeName;
        // resizeImage.path = dest;
        // resizeImage;
        return uploadToS3(resizeImage, buffer)
          .then((data) => {
            deleteTempFile(dest);
            resolve(data);
          })
          .catch((err) => {
            throw err;
          });
      });
  }));
}

// Method to get csv header
// const getCSVHeader = (csvType) => {
//   let csvHeader;
//   if (constants.CSV_FOR.SCHOOL == csvType) {
//     csvHeader = constants.CSV_HEADER.SCHOOL;
//   }
//   if (constants.CSV_FOR.PROGRAM == csvType) {
//     csvHeader = constants.CSV_HEADER.PROGRAM;
//   }
//   return csvHeader;
// };

function getS3ObjectByUploadUrl(params, csvType) {
  // const headers = getCSVHeader(csvType);
  return new Promise(((resolve, reject) => {
    const finalData = [];
    const s3Stream = photoBucket.getObject(params).createReadStream();
    const options = {
      trim: true,
      // headers,
    };
    fastCsv.fromStream(s3Stream, options)
      .on("data-invalid", (data) => {
        logger.error("data-invalid", data);
      })
      .on("data", (data) => {
        finalData.push(data);
      })
      .on("end", (resp) => {
        resolve(finalData);
      })
      .on("error", (err) => {
        console.log("err", err);
        reject(err);
      });
  }));
}

//= ========================= Export Module Start ==============================

module.exports = {
  uploadFile, uploadImageThumb, getS3ObjectByUploadUrl, deleteTempFile,
};

//= ========================= Export Module End ===============================

