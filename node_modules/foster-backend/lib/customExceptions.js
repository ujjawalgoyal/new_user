//= ========================= Load Modules Start ===========================

//= ========================= Load Internal Module =========================

// Load exceptions
const constants = require("./constants");
const Exception = require("./model/Exception");

//= ========================= Load Modules End =============================

//= ========================= Export Module Start ==========================

module.exports = {
  intrnlSrvrErr(err) {
    return new Exception(1, "internal Server Error", err);
  },
  unAuthenticatedAccess(err) {
    return new Exception(2, "Unauthorized access", err);
  },
  tokenGenException(err) {
    return new Exception(3, constants.MESSAGES.tokenGenError, err);
  },
  validationError(errMsg, err) {
    return new Exception(4, errMsg, err);
  },
  emailAlrdyRegistered(errMsg, err) {
    return new Exception(5, errMsg || constants.MESSAGES.emailAlrdyRegistered, err);
  },
  invalidMobileNo() {
    return new Exception(6, constants.MESSAGES.invalidMobileNo);
  },
  emailOrPhoneDoesNotExists(errMsg, err) {
    return new Exception(7, errMsg || constants.MESSAGES.emailOrPhoneDoesNotExists, err);
  },
  bucketAlreadyCreated(errMsg, err) {
    return new Exception(8, errMsg || constants.MESSAGES.bucketAlreadyCreated, err);
  },
  ethnicityAlreadyCreated(errMsg, err) {
    return new Exception(9, errMsg || constants.MESSAGES.ethnicityAlreadyCreated, err);
  },
  inactiveUser(errMsg) {
    return new Exception(10, errMsg);
  },
  getIncorrectFbTokenException() {
    return new Exception(11, constants.MESSAGES.incorrectFbToken);
  },
  getIncorrectGoogleTokenException() {
    return new Exception(11, constants.MESSAGES.incorrectGoogleToken);
  },
  getIncorrectInstaTokenException() {
    return new Exception(12, constants.MESSAGES.incorrectInstaToken);
  },
  actNotRecognised(errMsg, err) {
    return new Exception(13, errMsg || constants.MESSAGES.actNotRecognised, err);
  },
  passwordNotMatched(err) {
    return new Exception(14, constants.MESSAGES.passwordDidNotMatched, err);
  },
  keywordNotMatched(err) {
    return new Exception(15, constants.MESSAGES.keywordDidNotMatched, err);
  },
  linkExpired(errMsg, err) {
    return new Exception(16, errMsg || constants.MESSAGES.linkExpired, err);
  },
  programNotExists(err) {
    return new Exception(17, constants.MESSAGES.programNotFound, err);
  },
  programAlreadyFav(err) {
    return new Exception(18, constants.MESSAGES.programAlreadyFav, err);
  },
  programAlreadyUnFav(err) {
    return new Exception(19, constants.MESSAGES.programAlreadyUnFav, err);
  },
  userDoesNotExists() {
    return new Exception(20, constants.MESSAGES.userDoesNotExists);
  },
  referralCodeDoesNotExists() {
    return new Exception(21, constants.MESSAGES.referralCodeDoesNotExists);
  },
  programOccurenceAlreadyExists() {
    return new Exception(22, constants.MESSAGES.programOccurenceAlreadyExists);
  },
  bucketDoesNotExists() {
    return new Exception(23, constants.MESSAGES.bucketDoesNotExists);
  },
  programNotValidDistance(err) {
    return new Exception(24, constants.MESSAGES.invalidCheckInDistance, err);
  },
  programAlreadyCheckIn(err) {
    return new Exception(25, constants.MESSAGES.programAlreadyCheckIn, err);
  },
  noUserFoundForForgot(errMsg) {
    return new Exception(26, errMsg || constants.MESSAGES.noUserFoundForForgot);
  },
  invalidChild(errMsg) {
    return new Exception(27, errMsg || constants.MESSAGES.invalidChild);
  },
  programAlreadyLiked() {
    return new Exception(28, constants.MESSAGES.programAlreadyLiked);
  },
  ethnicityTypeAlreadyCreated() {
    return new Exception(29, constants.MESSAGES.ethnicityTypeAlreadyCreated);
  },
  socialShareCantEmpty() {
    return new Exception(31, constants.MESSAGES.socialShareCantEmpty);
  },
  socialIdCannotEmpty() {
    return new Exception(31, constants.MESSAGES.socialIdCannotEmpty);
  },
  wrongPhoneNo() {
    return new Exception(31, constants.MESSAGES.wrongPhoneNo);
  },
  invalidUser() {
    return new Exception(31, constants.MESSAGES.invalidUser);
  },
  alreadyChild() {
    return new Exception(32, constants.MESSAGES.alreadyChild);
  },
  alreadyParent() {
    return new Exception(32, constants.MESSAGES.alreadyParent);
  },
  onlyMakeChild() {
    return new Exception(33, constants.MESSAGES.onlyMakeChild);
  },
  onlyMakeParent() {
    return new Exception(33, constants.MESSAGES.onlyMakeParent);
  },
  senderDoesNotExists() {
    return new Exception(33, constants.MESSAGES.senderDoesNotExists);
  },
  requestNotExists() {
    return new Exception(33, constants.MESSAGES.requestNotExists);
  },
  requestAlreadySent() {
    return new Exception(33, constants.MESSAGES.requestAlreadySent);
  },
  respondedToRequest() {
    return new Exception(33, constants.MESSAGES.respondedToRequest);
  },
  notMyParent() {
    return new Exception(33, constants.MESSAGES.notMyParent);
  },
  notMyChild() {
    return new Exception(33, constants.MESSAGES.notMyChild);
  },
  invalidRoleSearch() {
    return new Exception(33, constants.MESSAGES.invalidRoleSearch);
  },
  userIsInactive() {
    return new Exception(33, constants.MESSAGES.userIsInactive);
  }

};

//= ========================= Export Module End ===========================
