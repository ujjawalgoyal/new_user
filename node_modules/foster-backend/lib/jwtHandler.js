// load all dependencies
const Promise = require("bluebird");
const jwt = Promise.promisifyAll(require("jsonwebtoken"));
const exceptions = require("./customExceptions");
const redisCli = require("../redis/redis");

const EMAIL_LINK_EXP_TIME = "2d";
const JWT_ALGORITHM = "RS256";
const JWT_SECRET_KEY = "login_secret_key_to_save_data";
const crypto = require("crypto");

function genUsrToken(userId, setExpire) {
  const options = {};
  /* if (setExpire) {
   options.expiresIn = EMAIL_LINK_EXP_TIME;
   } */
  return jwt.signAsync({ userId }, JWT_SECRET_KEY, options)
    .bind({})
    .then(function (jwtToken) {
      // return jwtToken;
      const hashKey = crypto.randomBytes(20).toString("hex");
      this.userToken = hashKey;
      const params = {};
      params.userToken = hashKey;
      params.jwtToken = jwtToken;
      params.uid = userId;
      return redisCli.setJWTToken(params);
    })
    .then(function (saveTknRslt) {
      return this.userToken;
    })
    .catch((err) => {
      console.log(err);
      throw new exceptions.tokenGenException();
    });
}

function verifyUsrToken(acsTokn) {
  return redisCli.getValue(acsTokn)
    .bind({})
    .then(function (rslt) {
      if (!rslt) {
        this.err = true;
        throw exceptions.sessionExpired();
      }
      const tokenDetails = JSON.parse(rslt);
      this.jwtToken = tokenDetails.jwtToken;
      this.userId = tokenDetails.uid;
      return redisCli.getValue(this.userId);
    })
    .then(function (tokenRslt) {
      console.log(tokenRslt);
      if (tokenRslt === this.jwtToken) {
        return jwt.verifyAsync(this.jwtToken, JWT_SECRET_KEY);
      }
      this.err = true;
      throw exceptions.sessionExpired();
    })
    .then(tokenPayload => tokenPayload)
    .catch(function (err) {
      if (!this.err) {
        throw exceptions.unAuthenticatedAccess(err);
      }
      throw err;
    });
}


function genJwtToken(data, setExpire) {
  const options = {};
  /* if (setExpire) {
   options.expiresIn = EMAIL_LINK_EXP_TIME;
   } */
  return jwt.signAsync(data, JWT_SECRET_KEY, options)
    .then(jwtToken => jwtToken)
    .catch((err) => {
      throw exceptions.tokenGenException();
    });
}

function verifyJwtToken(acsTokn) {
  return jwt.verifyAsync(acsTokn, JWT_SECRET_KEY)
    .then(tokenPayload => tokenPayload)
    .catch((err) => {
      throw exceptions.unAuthenticatedAccess(err);
    });
}

function removeUserToken(tokenInfo) {
  const removeUserIdPrms = redisCli.deleteKey(tokenInfo.userId);
  const removeUserTokens = redisCli.deleteKey(tokenInfo.accessToken);
  return Promise.join(removeUserIdPrms, removeUserTokens)
    .then(result => result)
    .catch((err) => {
      throw err;
    });
}

module.exports = {
  genUsrToken,
  verifyUsrToken,
  genJwtToken,
  verifyJwtToken,
  removeUserToken,
};
