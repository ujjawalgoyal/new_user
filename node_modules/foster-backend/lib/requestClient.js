const _ = require("lodash");
const request = require("request-promise");
const constants = require("./constants");

const REQUEST_METHOD = {
  GET: "GET",
  POST: "POST",
};


/**
 * Finally Make Request
 * @param options
 * @param headers
 * @return {Promise|*}
 * @private
 */
function makeRequest(options, doNotThrowError) {
  // Finally Hit Server
  return request(options)
    .then(body =>
      // request succeeded...
      body)
    .catch((err) => {
      // request failed...
      if (!doNotThrowError) {
        throw err;
      }
      // Otherwise return nothing..null
    });
}

/**
 * Generate options depending upon request
 * @param method
 * @param url
 * @param data
 * @return {{method: *, uri: *, headers: {}, json: boolean}}
 */
function generateRequestData(url, method, data, headers) {
  const options = {
    method,
    uri: url, // url to hit
    headers: {},
    json: true, // Automatically parses the JSON string in the response
  };
  // Validate Data
  data = _.isEmpty(data) ? constants.EMPTY_OBJECT : data;

  // Add Data to request
  switch (method) {
    case REQUEST_METHOD.GET:
      options.qs = data;
      break;
    case REQUEST_METHOD.POST:
      options.form = data;
      options.headers = {
        "content-type": "application/x-www-form-urlencoded",
      };
      break;
    default:
  }
  // If headers provided use them
  _.isEmpty(headers) ? constants.DO_NOTHING : options.headers = _.assign(options.headers, headers);
  return options;
}

/**
*
* @param url
* @param method
* @param data
* @param headers
* @return {Promise|*}
*/
function prepareAndMakeRequest(url, method, data, headers, doNotThrowError) {
  return makeRequest(generateRequestData(url, method, data, headers), doNotThrowError);
}

/**
 *
 * @param url
 * @param params
 * @param headers
 * @return {Promise|*}
 * @private
 */
function get(url, params, headers, doNotThrowError) {
  return prepareAndMakeRequest(url, REQUEST_METHOD.GET, params, headers, doNotThrowError);
}

/**
 *
 * @param url
 * @param params
 * @param headers
 * @return {Promise|*}
 * @private
 */
function post(url, params, headers, doNotThrowError) {
  return prepareAndMakeRequest(url, REQUEST_METHOD.POST, params, headers, doNotThrowError);
}


module.exports = {
  GET: get,
  POST: post,
};
