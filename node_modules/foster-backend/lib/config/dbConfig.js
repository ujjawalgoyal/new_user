

//= ================================== Load Modules start ===================================

//= ================================== Load external modules=================================
const mongoose = require("mongoose");
// Import logger
const logger = require("../logger").logger;
// plugin bluebird promise in mongoose
mongoose.Promise = require("bluebird");
const redis = require("redis");

const redisPort = 6379;
const redisHost = "127.0.0.1";

//= ================================== Load Modules end =====================================


// Connect to Db
function connectDb(env, callback) {
  const dbName = env.mongo.dbName;
  let dbUrl = env.mongo.dbUrl;
  const dbOptions = env.mongo.options;
  if (env.isProd) {
    logger.info(`configuring db in ${env.TAG} mode`);
    dbUrl += dbName;
  } else {
    logger.info(`configuring db in ${env.TAG} mode`);
    dbUrl += dbName;
    mongoose.set("debug", true);
  }

  logger.info(`connecting to -> ${dbUrl}`);
  mongoose.connect(dbUrl, dbOptions);


  // CONNECTION EVENTS
  // When successfully connected
  mongoose.connection.on("connected", () => {
    logger.info("connected to DB", dbName, "at", dbUrl);
    callback();
  });

  // If the connection throws an error
  mongoose.connection.on("error", (err) => {
    logger.info(`DB connection error: ${err}`);
    callback(err);
  });

  // When the connection is disconnected
  mongoose.connection.on("disconnected", () => {
    logger.info("DB connection disconnected");
    callback("DB connection disconnected");
  });
}

const client = redis.createClient(redisPort, redisHost);
const connectRedis = function (env, callback) {
  client.select(env.redisDb.redisDBIndex, (err, res) => {
    if (err) {
      console.log(err);
      callback(err, null);
    } else {
      callback(null, res);
    }
  });
  client.on("error", (err) => {
    console.log(`Error ${err}`);
    callback(err, null);
  });
};

module.exports = {
  connectDb,
  connectRedis,
  client,
};
