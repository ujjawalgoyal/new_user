

//= ========================= Load Modules Start ===========================

//= ========================= Load external Module =========================

const _ = require("lodash");

//= ========================= Load internal Module =========================

const constants = require("../constants");
const jwtHandler = require("../jwtHandler");
const exceptions = require("../customExceptions");
const logger = require('../logger').logger;
//= ========================= Load Modules End =============================

// Method to get API name
const getApiName = (req) => {
  let string = req.originalUrl.indexOf("details");
  if (string <= -1) {
    string = req.originalUrl.indexOf("list");
  }
  if (string <= -1) {
    string = req.originalUrl.indexOf("list_by_latlng");
  }
  if (string <= -1) {
    string = req.originalUrl.indexOf("list_bucket");
  }
  if (string <= -1) {
    string = req.originalUrl.indexOf("getwallet");
  }
  return string;
};

// Method to get API module name
const getModuleName = (req) => {
  let moduleName = req.originalUrl.indexOf("program");
  if (moduleName <= -1) {
    moduleName = req.originalUrl.indexOf("user");
  }
  return moduleName;
};

/**
 * For authentication
 * @param req
 * @param res
 * @param next
 * @returns {Promise.<T>|Promise}
 */
const autntctTkn = async (req, res, next) => {
  try {
   // console.log("req details",req)
    const acsToken = req.get("Authorization");
    const apiName = getApiName(req);
    const moduleName = getModuleName(req);
    if (!acsToken && apiName > -1 && moduleName > -1) {

      next();
      return;
    }
    const tokenPayload = await jwtHandler.verifyJwtToken(acsToken);
    if (!tokenPayload) {
      throw exceptions.unAuthenticatedAccess(constants.MESSAGES.invalid_user);
    }
    req.user = tokenPayload;
    const isValidToken = true;
    if (isValidToken) {
      next();
    } else {
      throw exceptions.unAuthenticatedAccess(constants.MESSAGES.userLoggedOut);
    }
  } catch (err) {
    const error = {};
    error.errorCode = 1;
    error.msg = constants.MESSAGES.invalid_authorization;
    next(error);
  }
};

const getHeaders = function (req, res, next) {
  req.body.registration_ids = {
    id: req.get("registration-id"),
    plat_form: req.get("platform"),
  };
  next();
};
//= ========================= Export Module Start ===========================

module.exports = {
  autntctTkn,
  getHeaders,
};

//= ========================= Export Module End ===========================
