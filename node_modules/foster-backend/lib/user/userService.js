//= ========================= Load Modules Start =======================

const _ = require("lodash");
//= ========================= Load internal modules ====================

const userDao = require("./userDao");
const customExceptions = require("../customExceptions");
const appConstants = require("./userConstants");
const emailService = require("../email/emailService");
const appUtils = require("../appUtils");

//= ========================= Load Modules End ==============================================

const makeWritableObj = obj => JSON.parse(JSON.stringify(obj));

const updateOtp = async (params) => {
    try {
        // return { otp: params.otp };
        return await userDao.updateOtp(params);
    } catch (err) {
        throw err;
    }
};

const registerUser = async (params) => {
    try {
        params.device = params.registration_ids;
        delete params.registration_ids;
        const resp = await userDao.registerUser(params);
        const obj = makeWritableObj(resp);
        //   params.registration_ids = params.device;
        //   params.registration_ids = await setSnsEndPoint(params);
        //   const updateRegistIds = await userDao.updateUserRegistrationIds(params);
        return obj;
    } catch (err) {
        if (err.code === 11000) {
            throw customExceptions.emailAlrdyRegistered();
        }
        throw err;
    }
};

// Method to create social (fb / instagram) user
const findCreateSocialUser = async (params) => {
    try {
        // checks if fb profile id is availaible or insta profile id.
        const query = {};
        if (params.profileId) {
            query.fb_id = params.profileId;
        }
        if (params.gplus_id) {
            query.gplus_id = params.gplus_id;
        }
        if (_.isEmpty(query)) {
            throw customExceptions.actNotRecognised();
        }
        const resp = await userDao.findUserBySocialId(query);
        return resp;
    } catch (err) {
        throw err;
    }
};

/**
 *
 * @param email
 * @param password
 * @returns user
 */
const loginWithEmail = async (params) => {
    const resp = await userDao.loginWithEmail(params);
    if (!_.isEmpty(resp) &&
        (resp.status == appConstants.USER_STATUS.INACTIVE)) {
        throw customExceptions.inactiveUser(appConstants.MESSAGES.inActive);
    }
    if (!_.isEmpty(resp)) {
        return resp;
    }
    throw customExceptions.validationError(appConstants.MESSAGES.invalid_user);
};


// Check OTP is expire or not
const checkOtp = (user, params) => {
    if (_.isEmpty(user)) {
        throw customExceptions.emailOrPhoneDoesNotExists();
    } else if (user.otp != params.otp) {
        throw customExceptions.validationError(appConstants.MESSAGES.invalidOtp);
    } else if (appUtils.currentUnixTimeStamp() - user.otp_expire > appConstants.OTP_EXPIRY_TIME) {
        throw customExceptions.validationError(appConstants.MESSAGES.otpExpired);
    }
};

// confirm otp verification
const confirmUserOtp = async (params) => {
    try {
        const user = await userDao.getUserByEmail(params);
        checkOtp(user, params);
        params = _.assign(params, { status: appConstants.USER_STATUS.ACTIVE, _id: user._id });
        const updateUser = await userDao.updateUserStatus(params);
        params._id = user._id;
        user.status = appConstants.USER_STATUS.ACTIVE;
        return user;
    } catch (err) {
        throw err;
    }
};




// Send forgot password mail
const sendForgotPasswordMail = async (userDetail, params) => {
    try {
        params.role = userDetail.role;
        params.uid = userDetail._id;
        const token = await jwtHandler.genJwtToken(params);
        userDetail.token = token;
        // const resp = await emailService.sendResetPasswordMail(userDetail);
        const tokenUpdated = await userDao.updateResetPasswordToken(token, params.email);
        return tokenUpdated;
    } catch (err) {
        throw err;
    }
};


const forgotPassword = async (params) => {
    try {
        const userDetail = await userDao.getUserByEmail(params);
        if (!_.isEmpty(userDetail) && (userDetail.status == appConstants.USER_STATUS.INACTIVE)) {
            throw customExceptions.noUserFoundForForgot(appConstants.MESSAGES.inActive);
        }
        if (!_.isEmpty(userDetail)) {
            const resp = await sendForgotPasswordMail(userDetail, params);
            return {
                user: {
                    uid: resp.uid,
                    email: resp.email,
                    status: resp.status,
                    message: appConstants.MESSAGES.userForgotPasswordLinkSend,
                },
            };
        }
        throw customExceptions.noUserFoundForForgot(appConstants.MESSAGES.noUserFoundForForgot);
    } catch (err) {
        throw err;
    }
};


// Method to reset password
const changeForgotPass = params => userDao.changeForgotPass(params)
    .then((resp) => {
        if (!_.isEmpty(resp)) {
            return resp;
        }
        throw customExceptions.linkExpired();
    })
    .catch((err) => {
        throw customExceptions.linkExpired();
    });


const addUpdateProfileImage = async (params) => {
    try {
        const resp = await userDao.addUpdateProfileImage(params);
        return resp;
    } catch (err) {
        throw err;
    }
};
//= =======================================Export module====================================
module.exports = {
    registerUser,
    findCreateSocialUser,
    loginWithEmail,
    updateOtp,
    confirmUserOtp,
    forgotPassword,
    changeForgotPass,
    addUpdateProfileImage
};

//= ======================================= END ==============================================
