//= ========================= Load Modules Start =======================

const mongoose = require("mongoose");

//= ========================= Load internal modules ========================================

const BaseDao = require("../dao/baseDao");
const User = require("../model/users");


// init user dao

const appUtils = require("../appUtils");
const appConstants = require("./userConstants");
const userDao = new BaseDao(User);

//= ========================= Load Modules End ==============================================
const updateOtp = (params) => {
    const query = {},
        update = {};
    query.email = params.email;
    update.otp_expire = Date.now();
    update.updated_at = Date.now();
    update.otp = params.otp;
    update.status = appConstants.USER_STATUS.OTP_NOT_VERIFIED;
    return userDao.findOneAndUpdate(query, update);
};

const getUserByEmail = (params) => {
    const query = {};
    query.email = params.email;
    return User.findOne(query).lean();
};


const registerUser = async (userInfo) => {
    const user = new User(userInfo);
    return userDao.save(user);
};

const addUpdateProfileImage = (params) => {
    const query = {},
        updateObj = {},
        options = { new: true };
    query._id = params._id;
    updateObj.profile_pic = params.profile_pic;
    updateObj.updated_at = Date.now();
    return userDao.findOneAndUpdate(query, updateObj, options);
};

// Method to find social (FB / Instagram) user by id
const findUserBySocialId = query => User.findOne(query).lean();

// Method to login with email or password
const loginWithEmail = (params) => {
    const query = {};
    query.email = params.email;
    query.password = params.password;
    return User.findOne(query).lean();
};

const updateResetPasswordToken = (resetPasswordToken, email) => {
    let query = {},
        update = {};
    query.email = email;
    update.reset_password_token = resetPasswordToken;
    update.updated_at = appUtils.currentUnixTimeStamp();
    return userDao.findOneAndUpdate(query, update);
};

// Method to reset password
const changeForgotPass = (params) => {
    let query = {},
        update = {};
    query._id = params.uid;
    query.reset_password_token = params.token;
    update.password = params.password;
    update.reset_password_token = "";
    update.updated_at = appUtils.currentUnixTimeStamp();
    return userDao.findOneAndUpdate(
        query
        , { $set: update }, { new: true },
    );
};

const updateUserStatus = (params) => {
    const query = {},
        update = {};
    query._id = params._id;
    update.status = appConstants.USER_STATUS.ACTIVE;
    update.updated_at = appUtils.currentUnixTimeStamp();
    return userDao.findOneAndUpdate(query, update);
};
//= ==================================== Export module =======================================

module.exports = {
    registerUser,
    findUserBySocialId,
    loginWithEmail,
    updateOtp,
    getUserByEmail,
    updateResetPasswordToken,
    changeForgotPass,
    updateUserStatus,
    addUpdateProfileImage
};

//= ======================================= End =============================================
