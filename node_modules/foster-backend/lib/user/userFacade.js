//= ========================= Load Modules Start =======================

const _ = require("lodash");

//= ========================= Load internal modules ========================================

const userService = require("./userService");
const appConstants = require("./userConstants");
const appUtils = require("../appUtils");
const emailService = require("../email/emailService");
const jwtHandler = require("../jwtHandler");
const exceptions = require("../customExceptions");
const uploadFacade = require("../uploadmedia/uploadFacade");


//= ========================= Load Modules End ==============================================

// Method to sent OTP
const sendOtp = async (user) => {
    const otp = appUtils.getRandomOtp();
    const token = await jwtHandler.genJwtToken({
        uid: user._id,
        role: user.role,
        status: user.status,
        otp: otp,
        email: user.email
    });

    console.log(token);
    const otpResp = { isOtpSent: 1, otp };
    otpResp.message = appConstants.MESSAGES.otpSentTOMobile;
    const data = { otp, email: user.email, _id: user._id };

    console.log(data);
    return userService.updateOtp(data).then((updatedData) => {
        if (!_.isEmpty(updatedData)) {
            let otpParams = updatedData.toJSON();

            otpParams.otp = otp;

            console.log(token);
            otpParams.token = token;
            console.log(otpParams, "paaaaaaa");
            return otpParams;
            // emailService.sendOtpMail(otpParams);
            // const phone = config.COUNTRY_CODE + updatedData.phone_no;
            // smsManager.sendConnectPhoneOTP(phone, otp).then(result => otpResp);
        } else {
            throw exceptions.validationError(appConstants.MESSAGES.emailNotExist);
        }
    });
};

// Method to create new user
const registerUser = async (params) => {
    try {
        let user = await userService.registerUser(params);
        if (!_.isEmpty(user) && params.file) {
            params = _.assign(params, { _id: user._id });
            const imgResp = await uploadFacade.addUpdateUserProfileImage(params);
            user = _.assign(user, { profile_pic: imgResp });
        }


        await createUserDefaultFolders(user);
        return sendOtp(user).then((data) => {
            return {
                message: appConstants.MESSAGES.registeredUser,
                data: data
            }
        });

    } catch (err) {
        throw err;
    }
};

// Method to build fb object
const buildFBObj = (fbUser) => {
    const user = { socialLogin: {} };
    if (fbUser.email) {
        user.email = fbUser.email;
    }
    user.login_type = appConstants.LOGIN_TYPE.FB; // 0 = fb, 1 = google
    user.profileId = fbUser.id;
    user.token = fbUser.accessToken;
    user.status = appConstants.USER_STATUS.NEW_FB_USER;
    user.registration_ids = fbUser.registration_ids;
    return user;
};

// Method to find create social user
const findCreateSocialUser = async (user) => {
    try {
        const userProfile = await userService.findCreateSocialUser(user);
        if (!_.isEmpty(userProfile)) {
            if (userProfile.status === appConstants.USER_STATUS.OTP_NOT_VERIFIED) {
                return { user: userProfile };
            }
            return jwtHandler.genJwtToken({
                uid: userProfile._id,
                role: userProfile.role,
            })
                .then(jwtToken => ({ token: jwtToken, user: userProfile }));
        }
        delete user.registration_ids;
        return { user };
    } catch (err) {
        throw err;
    }
};

// Method to create fb user
const findCreateFbUser = async (fbUser) => {
    const user = buildFBObj(fbUser);
    const resp = await findCreateSocialUser(user);
    return resp;
};

// Method to build google object
const buildGoogleObj = (googleUser) => {
    const user = {};
    if (googleUser.emails && googleUser.emails.length) {
        user.email = googleUser.emails[0]['value'];
    }

    user.login_type = appConstants.LOGIN_TYPE.GOOGLE_PLUS; // Gplus = 4
    user.gplus_id = googleUser.id;
    user.token = googleUser.accessToken;
    user.status = appConstants.USER_STATUS.NEW_FB_USER;
    user.registration_ids = googleUser.registration_ids;
    return user;
};

const findCreateGoogleUser = async (googleUser) => {
    const user = buildGoogleObj(googleUser);
    const resp = await findCreateSocialUser(user);
    return resp;
};

/**
 * @function login
 * login via email / password
 * @param email and password
 */
const loginWithEmail = async (params) => {
    try {
        const user = await userService.loginWithEmail(params);
        if (!user.status) {
            // send link again
            return sendOtp(user).then((data) => {

                // console.log(data,"daa");
                return { message: appConstants.MESSAGES.linkSent, data: data };
            });

        } else {
            const token = await jwtHandler.genJwtToken({
                uid: user._id,
                role: user.role,
            });
            return { token, user };
        }
    } catch (err) {
        throw err;
    }
};

const otpConfirmation = async (params) => {
    try {
        const data = await jwtHandler.verifyJwtToken(params.token);

        console.log(data);
        params.email = data.email;
        params.otp = data.otp;
        const user = await userService.confirmUserOtp(params);
        const jwt = await jwtHandler.genJwtToken({
            uid: user._id,
            role: user.role,
        });
        return { token: jwt, user };
    } catch (err) {
        throw err;
    }
};


// Method to send resend otp
const resendOtp = params => sendOtp(params)
    .then(data => { return { message: appConstants.MESSAGES.otpSent, otp: data.otp } }).catch((err) => {
        throw err;
    });

// Method to send forgot password link
const forgotPassword = userData =>
    userService.forgotPassword(userData);

// Method to reset password
const changeForgotPass = async (params) => {
    try {
        const decodedToken = await jwtHandler.verifyJwtToken(params.token);
        params.uid = decodedToken.uid;
        const resp = await userService.changeForgotPass(params);
        return appConstants.MESSAGES.passwordChanged;
    } catch (err) {
        throw err;
    }
};

// Method to reset password
const createUserDefaultFolders = async (params) => {
    try {
        const resp = await userService.createUserDefaultFolders(params);
        return resp;
    } catch (err) {
        throw err;
    }
};





//= ==================================== Export module =======================================

module.exports = {
    registerUser,
    findCreateFbUser,
    findCreateGoogleUser,
    loginWithEmail,
    otpConfirmation,
    resendOtp,
    forgotPassword,
    changeForgotPass,

};

//= ======================================= End =============================================
